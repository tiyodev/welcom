#!/usr/bin/env node

/**
 * Module dependencies.
 */
const chalk = require('chalk');
const app = require('../app');
const mongoose = require('mongoose');

/**
 * Connect to MongoDB.
 */
mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);

/**
 * handle the mongoose connection event
 */
mongoose.connection.on('connected', () => {
  console.info(`${chalk.green('✓')} MongoDB connection established!`);
});

/**
 * handle the mongoose connection error event
 */
mongoose.connection.on('error', (err) => {
  if (process.env.NODE_ENV === 'development') {
    console.error(`${chalk.red('✗')} MongoDB connection error: ${err}`);
  } else{
    console.error(`${chalk.red('✗')} MongoDB connection error. Please make sure MongoDB is running.`);
  }
  process.exit();
});

/**
 * handle the mongoose disconnect event
 */
mongoose.connection.on('disconnected', () => {  
  console.log('Mongoose default connection disconnected'); 
});

/**
 * If the Node process ends, close the Mongoose connection  
 */
process.on('SIGINT', function() {  
  mongoose.connection.close(() => { 
    console.log('Mongoose default connection disconnected through app termination'); 
    process.exit(0); 
  }); 
}); 

/**
 * Get port from environment and store in Express.
 */
app.set('port', process.env.PORT || 3000);

/**
 * Get uncaught exception
 */
process.on('uncaughtException', (err) => {
  console.error(' UNCAUGHT EXCEPTION ');
  console.error(`[Inside 'uncaughtException' event] ${err.stack}` || err.message);
});

/**
 * Get unhandled rejection
 */
process.on('unhandledRejection', (err) => {
  console.error(' UNHANDLED REJECTION ');
  console.error(`[Inside 'unhandledRejection' event] ${err.stack}` || err.message);
});

/**
 * Start server
 */
app.listen(app.get('port'), function () {
  console.log(`${chalk.green('✓')} App is running at http://localhost:${app.get('port')} in ${app.get('env')} mode`);
  console.log('  Press CTRL-C to stop\n');
})
